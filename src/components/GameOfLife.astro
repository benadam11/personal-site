<article
  class="bg-baseShaded w-full mb-12 pt-8 min-w-[328px] min-h-[400px] grid grid-rows-[auto_1fr]"
>
  <header class="text-contrast text-center font-serif">
    <h4 class="text-xl">Game Of Life</h4>
    <p class="text-xs font-serif text-center mt-2 text-contrastShaded">
      Conway's game of life starting with a glider gun.
    </p>
  </header>
  <figure class="relative mt-8">
    <canvas id="canvas"></canvas>
  </figure>
</article>

<script>
  type Cell = {
    x: number;
    y: number;
    isAlive: boolean;
    neighbors: Cell[];
  };

  const canvas = document.getElementById("canvas") as HTMLCanvasElement;
  const ctx = canvas.getContext("2d") as CanvasRenderingContext2D;

  // Set up canvas styling
  canvas.style.position = "absolute";
  canvas.style.width = "100%";
  canvas.style.height = "100%";

  // Get device pixel ratio (DPR)
  const dpr = window.devicePixelRatio || 1;

  // Set canvas size in CSS pixels
  const { width, height } = canvas.getBoundingClientRect();
  canvas.width = width * dpr;
  canvas.height = height * dpr;

  // Scale the drawing context to handle Retina displays
  ctx.scale(dpr, dpr);

  const cellSize = 4;
  const cellMargin = 2;
  const cols = Math.floor(canvas.width / dpr / (cellSize + cellMargin));
  const rows = Math.floor(canvas.height / dpr / (cellSize + cellMargin));
  const cells: Cell[][] = [];
  const stateHistory: Set<string> = new Set();
  const maxHistoryLength = 10; // Number of generations to track for oscillation

  // Access CSS variables
  const rootStyles = getComputedStyle(document.documentElement);
  const cellAliveColor = rootStyles.getPropertyValue("--contrast").trim();
  const cellDeadColor = rootStyles.getPropertyValue("--base-shaded").trim();

  ctx.fillStyle = cellDeadColor;

  // Initialize the grid with cells
  function initializeGrid() {
    for (let row = 0; row < rows; row++) {
      cells[row] = [];
      for (let col = 0; col < cols; col++) {
        cells[row].push({
          x: col * (cellSize + cellMargin),
          y: row * (cellSize + cellMargin),
          isAlive: Math.random() < 0.1,
          neighbors: [],
        });
      }
    }

    // Assign neighbors with wrapping
    cells.forEach((row, rowIndex) => {
      row.forEach((cell, colIndex) => {
        const neighborIndices = [
          [(rowIndex - 1 + rows) % rows, (colIndex - 1 + cols) % cols],
          [(rowIndex - 1 + rows) % rows, colIndex],
          [(rowIndex - 1 + rows) % rows, (colIndex + 1) % cols],
          [rowIndex, (colIndex - 1 + cols) % cols],
          [rowIndex, (colIndex + 1) % cols],
          [(rowIndex + 1) % rows, (colIndex - 1 + cols) % cols],
          [(rowIndex + 1) % rows, colIndex],
          [(rowIndex + 1) % rows, (colIndex + 1) % cols],
        ];

        neighborIndices.forEach(([r, c]) => {
          cell.neighbors.push(cells[r][c]);
        });
      });
    });
  }

  // Convert the current grid state to a string
  function gridToString(): string {
    return cells
      .map((row) => row.map((cell) => (cell.isAlive ? "1" : "0")).join(""))
      .join("");
  }

  // Update the grid based on the rules of life
  function updateGrid() {
    const changes: (() => void)[] = [];
    cells.forEach((row) => {
      row.forEach((cell) => {
        const livingNeighbors = cell.neighbors.filter((n) => n.isAlive).length;
        const willBeAlive = cell.isAlive
          ? livingNeighbors === 2 || livingNeighbors === 3
          : livingNeighbors === 3;

        if (cell.isAlive !== willBeAlive) {
          changes.push(() => {
            cell.isAlive = willBeAlive;
            ctx.fillStyle = cell.isAlive ? cellAliveColor : cellDeadColor;
            ctx.fillRect(cell.x, cell.y, cellSize, cellSize);
          });
        }
      });
    });

    changes.forEach((change) => change());
  }

  // Detect if the current grid state matches any previous states (oscillation detection)
  function detectOscillation() {
    const currentState = gridToString();

    if (stateHistory.has(currentState)) {
      initializeGrid();
    } else {
      stateHistory.add(currentState);

      // Remove the oldest state if we're tracking too many
      if (stateHistory.size > maxHistoryLength) {
        const firstKey = Array.from(stateHistory)[0];
        stateHistory.delete(firstKey);
      }
    }
  }

  const framesPerUpdate = 10; // Number of frames to wait before updating
  let frameCount = 0;

  function gameLoop() {
    frameCount++;

    if (frameCount >= framesPerUpdate) {
      updateGrid();
      detectOscillation();
      frameCount = 0;
    }

    requestAnimationFrame(gameLoop);
  }

  // Initialize and start the game
  initializeGrid();
  gameLoop();
</script>
